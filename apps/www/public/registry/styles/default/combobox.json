{
  "dependencies": [
    "@radix-ui/react-popover",
    "@sewell_stephens/late-combobox",
    "@sewell_stephens/late-floating"
  ],
  "files": [
    {
      "content": "'use client';\n\nimport React, { useEffect } from 'react';\n\nimport * as Popover from '@radix-ui/react-popover';\nimport { cn, withRef } from '@sewell_stephens/cn';\nimport {\n  type ComboboxContentItemProps,\n  type ComboboxContentProps,\n  type ComboboxProps,\n  comboboxActions,\n  useActiveComboboxStore,\n  useComboboxContent,\n  useComboboxContentState,\n  useComboboxControls,\n  useComboboxItem,\n  useComboboxSelectors,\n} from '@sewell_stephens/late-combobox';\nimport {\n  useEditorRef,\n  useEditorSelector,\n  useEventEditorSelectors,\n  useLateSelectors,\n} from '@sewell_stephens/late-common';\nimport {\n  createVirtualRef,\n  getBoundingClientRect,\n} from '@sewell_stephens/late-floating';\n\nexport const ComboboxItem = withRef<'div', ComboboxContentItemProps>(\n  ({ className, combobox, index, item, onRenderItem, ...rest }, ref) => {\n    const { props } = useComboboxItem({ combobox, index, item, onRenderItem });\n\n    return (\n      <div\n        className={cn(\n          'relative flex h-9 cursor-pointer select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors',\n          'hover:bg-accent hover:text-accent-foreground data-[highlighted=true]:bg-accent data-[highlighted=true]:text-accent-foreground',\n          className\n        )}\n        ref={ref}\n        {...props}\n        {...rest}\n      />\n    );\n  }\n);\n\nexport function ComboboxContent(props: ComboboxContentProps) {\n  const {\n    combobox,\n    component: Component,\n    items,\n    onRenderItem,\n    portalElement,\n  } = props;\n\n  const editor = useEditorRef();\n\n  const filteredItems = useComboboxSelectors.filteredItems();\n  const activeComboboxStore = useActiveComboboxStore()!;\n\n  const state = useComboboxContentState({ combobox, items });\n  const { menuProps, targetRange } = useComboboxContent(state);\n\n  const virtualRef = createVirtualRef(editor, targetRange ?? undefined, {\n    fallbackRect: getBoundingClientRect(editor, editor.selection!),\n  });\n\n  return (\n    <Popover.Root open>\n      <Popover.PopoverAnchor virtualRef={virtualRef} />\n\n      <Popover.Portal container={portalElement}>\n        <Popover.Content\n          {...menuProps}\n          align=\"start\"\n          className={cn(\n            'z-[500] m-0 max-h-[288px] w-[300px] overflow-scroll rounded-md bg-popover p-0 shadow-md'\n          )}\n          onOpenAutoFocus={(event) => event.preventDefault()}\n          side=\"bottom\"\n          sideOffset={5}\n        >\n          {Component ? Component({ store: activeComboboxStore }) : null}\n\n          {filteredItems.map((item, index) => (\n            <ComboboxItem\n              combobox={combobox}\n              index={index}\n              item={item}\n              key={item.key}\n              onRenderItem={onRenderItem}\n            />\n          ))}\n        </Popover.Content>\n      </Popover.Portal>\n    </Popover.Root>\n  );\n}\n\nexport function Combobox({\n  controlled,\n  disabled: _disabled,\n  filter,\n  id,\n  maxSuggestions,\n  onSelectItem,\n  searchPattern,\n  sort,\n  trigger,\n  ...props\n}: ComboboxProps) {\n  const storeItems = useComboboxSelectors.items();\n  const disabled =\n    _disabled ?? (storeItems.length === 0 && !props.items?.length);\n\n  const focusedEditorId = useEventEditorSelectors.focus?.();\n  const combobox = useComboboxControls();\n  const activeId = useComboboxSelectors.activeId();\n  const selectionDefined = useEditorSelector(\n    (editor) => !!editor.selection,\n    []\n  );\n  const editorId = useLateSelectors().id();\n\n  useEffect(() => {\n    comboboxActions.setComboboxById({\n      controlled,\n      filter,\n      id,\n      maxSuggestions,\n      onSelectItem,\n      searchPattern,\n      sort,\n      trigger,\n    });\n  }, [\n    id,\n    trigger,\n    searchPattern,\n    controlled,\n    onSelectItem,\n    maxSuggestions,\n    filter,\n    sort,\n  ]);\n\n  if (\n    !combobox ||\n    !selectionDefined ||\n    focusedEditorId !== editorId ||\n    activeId !== id ||\n    disabled\n  ) {\n    return null;\n  }\n\n  return <ComboboxContent combobox={combobox} {...props} />;\n}\n",
      "name": "combobox.tsx"
    }
  ],
  "name": "combobox",
  "registryDependencies": [],
  "type": "components:plate-ui"
}