{
  "dependencies": [],
  "files": [
    {
      "content": "'use client';\n\nimport React from 'react';\n\nimport type { DropdownMenuProps } from '@radix-ui/react-dropdown-menu';\n\nimport {\n  useColorDropdownMenu,\n  useColorDropdownMenuState,\n} from '@sewell_stephens/late-font/react';\n\nimport { DEFAULT_COLORS, DEFAULT_CUSTOM_COLORS } from './color-constants';\nimport { ColorPicker } from './color-picker';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuTrigger,\n} from './dropdown-menu';\nimport { ToolbarButton } from './toolbar';\n\nexport type TColor = {\n  isBrightColor: boolean;\n  name: string;\n  value: string;\n};\n\ntype ColorDropdownMenuProps = {\n  nodeType: string;\n  tooltip?: string;\n} & DropdownMenuProps;\n\nexport function ColorDropdownMenu({\n  children,\n  nodeType,\n  tooltip,\n}: ColorDropdownMenuProps) {\n  const state = useColorDropdownMenuState({\n    closeOnSelect: true,\n    colors: DEFAULT_COLORS,\n    customColors: DEFAULT_CUSTOM_COLORS,\n    nodeType,\n  });\n\n  const { buttonProps, menuProps } = useColorDropdownMenu(state);\n\n  return (\n    <DropdownMenu modal={false} {...menuProps}>\n      <DropdownMenuTrigger asChild>\n        <ToolbarButton tooltip={tooltip} {...buttonProps}>\n          {children}\n        </ToolbarButton>\n      </DropdownMenuTrigger>\n\n      <DropdownMenuContent align=\"start\">\n        <ColorPicker\n          clearColor={state.clearColor}\n          color={state.selectedColor || state.color}\n          colors={state.colors}\n          customColors={state.customColors}\n          updateColor={state.updateColorAndClose}\n          updateCustomColor={state.updateColor}\n        />\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}\n",
      "name": "color-dropdown-menu.tsx"
    },
    {
      "content": "export const DEFAULT_COLORS = [\n  {\n    isBrightColor: false,\n    name: 'black',\n    value: '#000000',\n  },\n  {\n    isBrightColor: false,\n    name: 'dark grey 4',\n    value: '#434343',\n  },\n  {\n    isBrightColor: false,\n    name: 'dark grey 3',\n    value: '#666666',\n  },\n  {\n    isBrightColor: false,\n    name: 'dark grey 2',\n    value: '#999999',\n  },\n  {\n    isBrightColor: false,\n    name: 'dark grey 1',\n    value: '#B7B7B7',\n  },\n  {\n    isBrightColor: false,\n    name: 'grey',\n    value: '#CCCCCC',\n  },\n  {\n    isBrightColor: false,\n    name: 'light grey 1',\n    value: '#D9D9D9',\n  },\n  {\n    isBrightColor: true,\n    name: 'light grey 2',\n    value: '#EFEFEF',\n  },\n  {\n    isBrightColor: true,\n    name: 'light grey 3',\n    value: '#F3F3F3',\n  },\n  {\n    isBrightColor: true,\n    name: 'white',\n    value: '#FFFFFF',\n  },\n  {\n    isBrightColor: false,\n    name: 'red berry',\n    value: '#980100',\n  },\n  {\n    isBrightColor: false,\n    name: 'red',\n    value: '#FE0000',\n  },\n  {\n    isBrightColor: false,\n    name: 'orange',\n    value: '#FE9900',\n  },\n  {\n    isBrightColor: true,\n    name: 'yellow',\n    value: '#FEFF00',\n  },\n  {\n    isBrightColor: false,\n    name: 'green',\n    value: '#00FF00',\n  },\n  {\n    isBrightColor: false,\n    name: 'cyan',\n    value: '#00FFFF',\n  },\n  {\n    isBrightColor: false,\n    name: 'cornflower blue',\n    value: '#4B85E8',\n  },\n  {\n    isBrightColor: false,\n    name: 'blue',\n    value: '#1300FF',\n  },\n  {\n    isBrightColor: false,\n    name: 'purple',\n    value: '#9900FF',\n  },\n  {\n    isBrightColor: false,\n    name: 'magenta',\n    value: '#FF00FF',\n  },\n\n  {\n    isBrightColor: false,\n    name: 'light red berry 3',\n    value: '#E6B8AF',\n  },\n  {\n    isBrightColor: false,\n    name: 'light red 3',\n    value: '#F4CCCC',\n  },\n  {\n    isBrightColor: true,\n    name: 'light orange 3',\n    value: '#FCE4CD',\n  },\n  {\n    isBrightColor: true,\n    name: 'light yellow 3',\n    value: '#FFF2CC',\n  },\n  {\n    isBrightColor: true,\n    name: 'light green 3',\n    value: '#D9EAD3',\n  },\n  {\n    isBrightColor: false,\n    name: 'light cyan 3',\n    value: '#D0DFE3',\n  },\n  {\n    isBrightColor: false,\n    name: 'light cornflower blue 3',\n    value: '#C9DAF8',\n  },\n  {\n    isBrightColor: true,\n    name: 'light blue 3',\n    value: '#CFE1F3',\n  },\n  {\n    isBrightColor: true,\n    name: 'light purple 3',\n    value: '#D9D2E9',\n  },\n  {\n    isBrightColor: true,\n    name: 'light magenta 3',\n    value: '#EAD1DB',\n  },\n\n  {\n    isBrightColor: false,\n    name: 'light red berry 2',\n    value: '#DC7E6B',\n  },\n  {\n    isBrightColor: false,\n    name: 'light red 2',\n    value: '#EA9999',\n  },\n  {\n    isBrightColor: false,\n    name: 'light orange 2',\n    value: '#F9CB9C',\n  },\n  {\n    isBrightColor: true,\n    name: 'light yellow 2',\n    value: '#FFE598',\n  },\n  {\n    isBrightColor: false,\n    name: 'light green 2',\n    value: '#B7D6A8',\n  },\n  {\n    isBrightColor: false,\n    name: 'light cyan 2',\n    value: '#A1C4C9',\n  },\n  {\n    isBrightColor: false,\n    name: 'light cornflower blue 2',\n    value: '#A4C2F4',\n  },\n  {\n    isBrightColor: false,\n    name: 'light blue 2',\n    value: '#9FC5E8',\n  },\n  {\n    isBrightColor: false,\n    name: 'light purple 2',\n    value: '#B5A7D5',\n  },\n  {\n    isBrightColor: false,\n    name: 'light magenta 2',\n    value: '#D5A6BD',\n  },\n\n  {\n    isBrightColor: false,\n    name: 'light red berry 1',\n    value: '#CC4125',\n  },\n  {\n    isBrightColor: false,\n    name: 'light red 1',\n    value: '#E06666',\n  },\n  {\n    isBrightColor: false,\n    name: 'light orange 1',\n    value: '#F6B26B',\n  },\n  {\n    isBrightColor: false,\n    name: 'light yellow 1',\n    value: '#FFD966',\n  },\n  {\n    isBrightColor: false,\n    name: 'light green 1',\n    value: '#93C47D',\n  },\n  {\n    isBrightColor: false,\n    name: 'light cyan 1',\n    value: '#76A5AE',\n  },\n  {\n    isBrightColor: false,\n    name: 'light cornflower blue 1',\n    value: '#6C9EEB',\n  },\n  {\n    isBrightColor: false,\n    name: 'light blue 1',\n    value: '#6FA8DC',\n  },\n  {\n    isBrightColor: false,\n    name: 'light purple 1',\n    value: '#8D7CC3',\n  },\n  {\n    isBrightColor: false,\n    name: 'light magenta 1',\n    value: '#C27BA0',\n  },\n\n  {\n    isBrightColor: false,\n    name: 'dark red berry 1',\n    value: '#A61B00',\n  },\n  {\n    isBrightColor: false,\n    name: 'dark red 1',\n    value: '#CC0000',\n  },\n  {\n    isBrightColor: false,\n    name: 'dark orange 1',\n    value: '#E59138',\n  },\n  {\n    isBrightColor: false,\n    name: 'dark yellow 1',\n    value: '#F1C231',\n  },\n  {\n    isBrightColor: false,\n    name: 'dark green 1',\n    value: '#6AA74F',\n  },\n  {\n    isBrightColor: false,\n    name: 'dark cyan 1',\n    value: '#45818E',\n  },\n  {\n    isBrightColor: false,\n    name: 'dark cornflower blue 1',\n    value: '#3B78D8',\n  },\n  {\n    isBrightColor: false,\n    name: 'dark blue 1',\n    value: '#3E84C6',\n  },\n  {\n    isBrightColor: false,\n    name: 'dark purple 1',\n    value: '#664EA6',\n  },\n  {\n    isBrightColor: false,\n    name: 'dark magenta 1',\n    value: '#A64D78',\n  },\n\n  {\n    isBrightColor: false,\n    name: 'dark red berry 2',\n    value: '#84200D',\n  },\n  {\n    isBrightColor: false,\n    name: 'dark red 2',\n    value: '#990001',\n  },\n  {\n    isBrightColor: false,\n    name: 'dark orange 2',\n    value: '#B45F05',\n  },\n  {\n    isBrightColor: false,\n    name: 'dark yellow 2',\n    value: '#BF9002',\n  },\n  {\n    isBrightColor: false,\n    name: 'dark green 2',\n    value: '#38761D',\n  },\n  {\n    isBrightColor: false,\n    name: 'dark cyan 2',\n    value: '#124F5C',\n  },\n  {\n    isBrightColor: false,\n    name: 'dark cornflower blue 2',\n    value: '#1155CB',\n  },\n  {\n    isBrightColor: false,\n    name: 'dark blue 2',\n    value: '#0C5394',\n  },\n  {\n    isBrightColor: false,\n    name: 'dark purple 2',\n    value: '#351C75',\n  },\n  {\n    isBrightColor: false,\n    name: 'dark magenta 2',\n    value: '#741B47',\n  },\n\n  {\n    isBrightColor: false,\n    name: 'dark red berry 3',\n    value: '#5B0F00',\n  },\n  {\n    isBrightColor: false,\n    name: 'dark red 3',\n    value: '#660000',\n  },\n  {\n    isBrightColor: false,\n    name: 'dark orange 3',\n    value: '#783F04',\n  },\n  {\n    isBrightColor: false,\n    name: 'dark yellow 3',\n    value: '#7E6000',\n  },\n  {\n    isBrightColor: false,\n    name: 'dark green 3',\n    value: '#274E12',\n  },\n  {\n    isBrightColor: false,\n    name: 'dark cyan 3',\n    value: '#0D343D',\n  },\n  {\n    isBrightColor: false,\n    name: 'dark cornflower blue 3',\n    value: '#1B4487',\n  },\n  {\n    isBrightColor: false,\n    name: 'dark blue 3',\n    value: '#083763',\n  },\n  {\n    isBrightColor: false,\n    name: 'dark purple 3',\n    value: '#1F124D',\n  },\n  {\n    isBrightColor: false,\n    name: 'dark magenta 3',\n    value: '#4C1130',\n  },\n];\n\nexport const DEFAULT_CUSTOM_COLORS = [\n  {\n    isBrightColor: false,\n    name: 'dark orange 3',\n    value: '#783F04',\n  },\n  {\n    isBrightColor: false,\n    name: 'dark grey 3',\n    value: '#666666',\n  },\n  {\n    isBrightColor: false,\n    name: 'dark grey 2',\n    value: '#999999',\n  },\n  {\n    isBrightColor: false,\n    name: 'light cornflower blue 1',\n    value: '#6C9EEB',\n  },\n  {\n    isBrightColor: false,\n    name: 'dark magenta 3',\n    value: '#4C1130',\n  },\n];\n",
      "name": "color-constants.ts"
    },
    {
      "content": "'use client';\n\nimport React from 'react';\n\nimport type { DropdownMenuItemProps } from '@radix-ui/react-dropdown-menu';\n\nimport { cn } from '@sewell_stephens/cn';\n\nimport { Icons } from '@/components/icons';\n\nimport type { TColor } from './color-dropdown-menu';\n\nimport { buttonVariants } from './button';\nimport { DropdownMenuItem } from './dropdown-menu';\nimport { Tooltip, TooltipContent, TooltipTrigger } from './tooltip';\n\ntype ColorDropdownMenuItemProps = {\n  isBrightColor: boolean;\n  isSelected: boolean;\n  name?: string;\n  updateColor: (color: string) => void;\n  value: string;\n} & DropdownMenuItemProps;\n\nexport function ColorDropdownMenuItem({\n  className,\n  isBrightColor,\n  isSelected,\n  name,\n  updateColor,\n  value,\n  ...props\n}: ColorDropdownMenuItemProps) {\n  const content = (\n    <DropdownMenuItem\n      className={cn(\n        buttonVariants({\n          isMenu: true,\n          variant: 'outline',\n        }),\n        'size-6 border border-solid border-muted p-0',\n        !isBrightColor && 'border-transparent text-white',\n        className\n      )}\n      onSelect={(e) => {\n        e.preventDefault();\n        updateColor(value);\n      }}\n      style={{ backgroundColor: value }}\n      {...props}\n    >\n      {isSelected ? <Icons.check /> : null}\n    </DropdownMenuItem>\n  );\n\n  return name ? (\n    <Tooltip>\n      <TooltipTrigger>{content}</TooltipTrigger>\n      <TooltipContent>{name}</TooltipContent>\n    </Tooltip>\n  ) : (\n    content\n  );\n}\n\ntype ColorDropdownMenuItemsProps = {\n  color?: string;\n  colors: TColor[];\n  updateColor: (color: string) => void;\n} & React.HTMLAttributes<HTMLDivElement>;\n\nexport function ColorDropdownMenuItems({\n  className,\n  color,\n  colors,\n  updateColor,\n  ...props\n}: ColorDropdownMenuItemsProps) {\n  return (\n    <div\n      className={cn('grid grid-cols-[repeat(10,1fr)] gap-1', className)}\n      {...props}\n    >\n      {colors.map(({ isBrightColor, name, value }) => (\n        <ColorDropdownMenuItem\n          isBrightColor={isBrightColor}\n          isSelected={color === value}\n          key={name ?? value}\n          name={name}\n          updateColor={updateColor}\n          value={value}\n        />\n      ))}\n    </div>\n  );\n}\n",
      "name": "color-dropdown-menu-items.tsx"
    },
    {
      "content": "'use client';\n\nimport React from 'react';\n\nimport { cn, withRef } from '@sewell_stephens/cn';\nimport { useComposedRef } from '@sewell_stephens/late-common/react';\nimport { useColorInput } from '@sewell_stephens/late-font/react';\n\nexport const ColorInput = withRef<'input'>(\n  ({ children, className, value = '#000000', ...props }, ref) => {\n    const { childProps, inputRef } = useColorInput();\n\n    return (\n      <div className=\"flex flex-col items-center\">\n        {React.Children.map(children, (child) => {\n          if (!child) return child;\n\n          return React.cloneElement(child as React.ReactElement, childProps);\n        })}\n\n        <input\n          className={cn('size-0 overflow-hidden border-0 p-0', className)}\n          ref={useComposedRef(ref, inputRef)}\n          type=\"color\"\n          value={value}\n          {...props}\n        />\n      </div>\n    );\n  }\n);\n",
      "name": "color-input.tsx"
    },
    {
      "content": "'use client';\n\nimport React from 'react';\n\nimport { cn, withRef } from '@sewell_stephens/cn';\n\nimport type { TColor } from './color-dropdown-menu';\n\nimport { buttonVariants } from './button';\nimport { ColorDropdownMenuItems } from './color-dropdown-menu-items';\nimport { ColorsCustom } from './colors-custom';\nimport { DropdownMenuItem } from './dropdown-menu';\nimport { Separator } from './separator';\n\nexport const ColorPickerContent = withRef<\n  'div',\n  {\n    clearColor: () => void;\n    color?: string;\n    colors: TColor[];\n    customColors: TColor[];\n    updateColor: (color: string) => void;\n    updateCustomColor: (color: string) => void;\n  }\n>(\n  (\n    {\n      className,\n      clearColor,\n      color,\n      colors,\n      customColors,\n      updateColor,\n      updateCustomColor,\n      ...props\n    },\n    ref\n  ) => {\n    return (\n      <div\n        className={cn('flex flex-col gap-4 p-4', className)}\n        ref={ref}\n        {...props}\n      >\n        <ColorsCustom\n          color={color}\n          colors={colors}\n          customColors={customColors}\n          updateColor={updateColor}\n          updateCustomColor={updateCustomColor}\n        />\n\n        <Separator />\n\n        <ColorDropdownMenuItems\n          color={color}\n          colors={colors}\n          updateColor={updateColor}\n        />\n        {color && (\n          <DropdownMenuItem\n            className={buttonVariants({\n              isMenu: true,\n              variant: 'outline',\n            })}\n            onClick={clearColor}\n          >\n            Clear\n          </DropdownMenuItem>\n        )}\n      </div>\n    );\n  }\n);\n\nexport const ColorPicker = React.memo(\n  ColorPickerContent,\n  (prev, next) =>\n    prev.color === next.color &&\n    prev.colors === next.colors &&\n    prev.customColors === next.customColors\n);\n",
      "name": "color-picker.tsx"
    },
    {
      "content": "'use client';\n\nimport React from 'react';\n\nimport {\n  useColorsCustom,\n  useColorsCustomState,\n} from '@sewell_stephens/late-font/react';\n\nimport type { TColor } from './color-dropdown-menu';\n\nimport { buttonVariants } from './button';\nimport { ColorDropdownMenuItems } from './color-dropdown-menu-items';\nimport { ColorInput } from './color-input';\nimport { DropdownMenuItem } from './dropdown-menu';\n\ntype ColorsCustomProps = {\n  color?: string;\n  colors: TColor[];\n  customColors: TColor[];\n  updateColor: (color: string) => void;\n  updateCustomColor: (color: string) => void;\n};\n\nexport function ColorsCustom({\n  color,\n  colors,\n  customColors,\n  updateColor,\n  updateCustomColor,\n}: ColorsCustomProps) {\n  const state = useColorsCustomState({\n    color,\n    colors,\n    customColors,\n    updateCustomColor,\n  });\n  const { inputProps, menuItemProps } = useColorsCustom(state);\n\n  return (\n    <div className=\"flex flex-col gap-4\">\n      <ColorInput {...inputProps}>\n        <DropdownMenuItem\n          className={buttonVariants({\n            isMenu: true,\n            variant: 'outline',\n          })}\n          {...menuItemProps}\n        >\n          CUSTOM\n        </DropdownMenuItem>\n      </ColorInput>\n\n      <ColorDropdownMenuItems\n        color={color}\n        colors={state.computedColors}\n        updateColor={updateColor}\n      />\n    </div>\n  );\n}\n",
      "name": "colors-custom.tsx"
    }
  ],
  "name": "color-dropdown-menu",
  "registryDependencies": [
    "dropdown-menu",
    "toolbar",
    "separator",
    "button",
    "tooltip"
  ],
  "type": "components:plate-ui"
}