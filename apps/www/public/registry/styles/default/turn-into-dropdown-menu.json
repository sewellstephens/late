{
  "dependencies": [
    "@sewell_stephens/late-block-quote",
    "@sewell_stephens/late-heading"
  ],
  "files": [
    {
      "content": "import React from 'react';\n\nimport type { DropdownMenuProps } from '@radix-ui/react-dropdown-menu';\n\nimport { BlockquotePlugin } from '@sewell_stephens/late-block-quote/react';\nimport {\n  ParagraphPlugin,\n  collapseSelection,\n  getNodeEntries,\n  isBlock,\n} from '@sewell_stephens/late-common';\nimport {\n  focusEditor,\n  useEditorRef,\n  useEditorSelector,\n} from '@sewell_stephens/late-common/react';\nimport { HEADING_KEYS } from '@sewell_stephens/late-heading';\n\nimport { Icons } from '@/components/icons';\n\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuLabel,\n  DropdownMenuRadioGroup,\n  DropdownMenuRadioItem,\n  DropdownMenuTrigger,\n  useOpenState,\n} from './dropdown-menu';\nimport { ToolbarButton } from './toolbar';\n\nconst items = [\n  {\n    description: 'Paragraph',\n    icon: Icons.paragraph,\n    label: 'Paragraph',\n    value: ParagraphPlugin.key,\n  },\n  {\n    description: 'Heading 1',\n    icon: Icons.h1,\n    label: 'Heading 1',\n    value: HEADING_KEYS.h1,\n  },\n  {\n    description: 'Heading 2',\n    icon: Icons.h2,\n    label: 'Heading 2',\n    value: HEADING_KEYS.h2,\n  },\n  {\n    description: 'Heading 3',\n    icon: Icons.h3,\n    label: 'Heading 3',\n    value: HEADING_KEYS.h3,\n  },\n  {\n    description: 'Quote (⌘+⇧+.)',\n    icon: Icons.blockquote,\n    label: 'Quote',\n    value: BlockquotePlugin.key,\n  },\n  // {\n  //   value: 'ul',\n  //   label: 'Bulleted list',\n  //   description: 'Bulleted list',\n  //   icon: Icons.ul,\n  // },\n  // {\n  //   value: 'ol',\n  //   label: 'Numbered list',\n  //   description: 'Numbered list',\n  //   icon: Icons.ol,\n  // },\n];\n\nconst defaultItem = items.find((item) => item.value === ParagraphPlugin.key)!;\n\nexport function TurnIntoDropdownMenu(props: DropdownMenuProps) {\n  const value: string = useEditorSelector((editor) => {\n    let initialNodeType: string = ParagraphPlugin.key;\n    let allNodesMatchInitialNodeType = false;\n    const codeBlockEntries = getNodeEntries(editor, {\n      match: (n) => isBlock(editor, n),\n      mode: 'highest',\n    });\n    const nodes = Array.from(codeBlockEntries);\n\n    if (nodes.length > 0) {\n      initialNodeType = nodes[0][0].type as string;\n      allNodesMatchInitialNodeType = nodes.every(([node]) => {\n        const type: string = (node?.type as string) || ParagraphPlugin.key;\n\n        return type === initialNodeType;\n      });\n    }\n\n    return allNodesMatchInitialNodeType ? initialNodeType : ParagraphPlugin.key;\n  }, []);\n\n  const editor = useEditorRef();\n  const openState = useOpenState();\n\n  const selectedItem =\n    items.find((item) => item.value === value) ?? defaultItem;\n  const { icon: SelectedItemIcon, label: selectedItemLabel } = selectedItem;\n\n  return (\n    <DropdownMenu modal={false} {...openState} {...props}>\n      <DropdownMenuTrigger asChild>\n        <ToolbarButton\n          className=\"lg:min-w-[130px]\"\n          isDropdown\n          pressed={openState.open}\n          tooltip=\"Turn into\"\n        >\n          <SelectedItemIcon className=\"size-5 lg:hidden\" />\n          <span className=\"max-lg:hidden\">{selectedItemLabel}</span>\n        </ToolbarButton>\n      </DropdownMenuTrigger>\n\n      <DropdownMenuContent align=\"start\" className=\"min-w-0\">\n        <DropdownMenuLabel>Turn into</DropdownMenuLabel>\n\n        <DropdownMenuRadioGroup\n          className=\"flex flex-col gap-0.5\"\n          onValueChange={(type) => {\n            // if (type === 'ul' || type === 'ol') {\n            //   if (settingsStore.get.checkedId(IndentListPlugin.key)) {\n            //     toggleIndentList(editor, {\n            //       listStyleType: type === 'ul' ? 'disc' : 'decimal',\n            //     });\n            //   } else if (settingsStore.get.checkedId('list')) {\n            //     toggleList(editor, { type });\n            //   }\n            // } else {\n            //   unwrapList(editor);\n            editor.tf.toggle.block({ type });\n            // }\n\n            collapseSelection(editor);\n            focusEditor(editor);\n          }}\n          value={value}\n        >\n          {items.map(({ icon: Icon, label, value: itemValue }) => (\n            <DropdownMenuRadioItem\n              className=\"min-w-[180px]\"\n              key={itemValue}\n              value={itemValue}\n            >\n              <Icon className=\"mr-2 size-5\" />\n              {label}\n            </DropdownMenuRadioItem>\n          ))}\n        </DropdownMenuRadioGroup>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}\n",
      "name": "turn-into-dropdown-menu.tsx"
    }
  ],
  "name": "turn-into-dropdown-menu",
  "registryDependencies": [
    "dropdown-menu",
    "toolbar"
  ],
  "type": "components:plate-ui"
}