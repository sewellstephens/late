{
  "dependencies": [
    "@sewellstephens/plate-cloud"
  ],
  "files": [
    {
      "content": "export * from './cloud-attachment-element';\n\nexport * from './cloud-image-element';\n\nexport * from './cloud-resize-controls';\n\nexport * from './cloud-status-bar';\n\nexport * from './cloud-toolbar-buttons';\n",
      "name": "cloud.tsx"
    },
    {
      "content": "'use client';\n\nimport React from 'react';\n\nimport { cn } from '@sewellstephens/cn';\nimport {\n  type TCloudAttachmentElement,\n  useCloudAttachmentElementState,\n} from '@sewellstephens/plate-cloud';\nimport {\n  LateElement,\n  type LateElementProps,\n} from '@sewellstephens/plate-common/react';\n\nimport { Icons } from '@/components/icons';\n\nimport { StatusBar } from './cloud-status-bar';\n\nexport interface CloudAttachmentElementProps\n  extends LateElementProps<TCloudAttachmentElement> {}\n\nexport function CloudAttachmentElement({\n  className,\n  ...props\n}: CloudAttachmentElementProps) {\n  const { children, element } = props;\n\n  const { focused, selected, upload } = useCloudAttachmentElementState({\n    element,\n  });\n\n  return (\n    <LateElement\n      className={cn(\n        'relative my-4 flex h-10 max-w-sm items-center gap-2 rounded-lg border border-border bg-background p-4',\n        focused && selected && 'border-blue-400 shadow-[0_0_1px_3px_#60a5fa]',\n        className\n      )}\n      draggable\n      {...props}\n    >\n      <div className=\"shrink-0 text-muted-foreground\" contentEditable={false}>\n        <Icons.attachment height={24} width={24} />\n      </div>\n      <div className=\"grow\" contentEditable={false}>\n        <div className=\"text-base\">{element.filename}</div>\n        <StatusBar upload={upload}>\n          <div className=\"text-sm text-muted-foreground\">\n            {element.bytes} bytes\n          </div>\n        </StatusBar>\n      </div>\n      <div\n        className=\"ml-4 size-8 shrink-0 duration-200\"\n        contentEditable={false}\n      >\n        {upload.status === 'success' && (\n          <a href={element.url} rel=\"noreferrer\" target=\"_blank\">\n            <Icons.downloadCloud\n              className=\"cursor-pointer text-muted-foreground hover:text-foreground\"\n              height={24}\n              width={24}\n            />\n          </a>\n        )}\n      </div>\n      {children}\n    </LateElement>\n  );\n}\n",
      "name": "cloud-attachment-element.tsx"
    },
    {
      "content": "'use client';\n\nimport React from 'react';\n\nimport { cn } from '@sewellstephens/cn';\nimport {\n  type TCloudImageElement,\n  useCloudImageElementState,\n} from '@sewellstephens/plate-cloud';\nimport {\n  LateElement,\n  type LateElementProps,\n} from '@sewellstephens/plate-common/react';\n\nimport { ResizeControls } from './cloud-resize-controls';\nimport { StatusBar } from './cloud-status-bar';\n\nexport interface CloudImageElementProps\n  extends LateElementProps<TCloudImageElement> {}\n\nexport function CloudImageElement({\n  className,\n  ...props\n}: CloudImageElementProps) {\n  const { children, element } = props;\n\n  const { focused, selected, setSize, size, src, srcSet, upload } =\n    useCloudImageElementState({ element });\n\n  return (\n    <LateElement\n      className={cn('relative my-4', className)}\n      draggable\n      {...props}\n    >\n      <span\n        contentEditable={false}\n        style={{\n          display: 'inline-block',\n          /**\n           * NOTE: This code pretty much needs to be this way or things stop\n           * working so this cannot be overrided in the `.styles.ts` file.\n           */\n          position: 'relative',\n          /** Disable user select. We use our own selection display. */\n          userSelect: 'none',\n          /**\n           * This is required so that we don't get an extra gap at the bottom.\n           * When display is 'inline-block' we get some extra space at the\n           * bottom for the descenders because the content is expected to\n           * co-exist with text.\n           *\n           * Setting vertical-align to top, bottom or middle fixes this because\n           * it is no longer baseline which causes the issue.\n           *\n           * This is usually an issue with 'img' but also affects this scenario.\n           *\n           * https://stackoverflow.com/questions/5804256/image-inside-div-has-extra-space-below-the-image\n           *\n           * Also, make sure that <img> on the inside is display: 'block'.\n           */\n          verticalAlign: 'top',\n        }}\n      >\n        {src === '' ? (\n          <div\n            className={cn(\n              'block rounded-lg',\n              focused && selected && 'shadow-[0_0_1px_3px_#60a5fa]'\n            )}\n            style={{\n              background: '#e0e0e0',\n              height: size.height,\n              width: size.width,\n            }}\n          />\n        ) : (\n          <img\n            alt=\"\"\n            className={cn(\n              'block rounded-lg',\n              focused && selected && 'shadow-[0_0_1px_3px_#60a5fa]'\n            )}\n            height={size.height}\n            src={src}\n            srcSet={srcSet}\n            width={size.width}\n          />\n        )}\n        <div className=\"absolute inset-x-2 top-1/2 -mt-2\">\n          <StatusBar upload={upload} />\n        </div>\n        {selected && focused && (\n          <ResizeControls element={element} setSize={setSize} size={size} />\n        )}\n      </span>\n      {children}\n    </LateElement>\n  );\n}\n",
      "name": "cloud-image-element.tsx"
    },
    {
      "content": "'use client';\n\nimport React, {\n  type Dispatch,\n  type SetStateAction,\n  useCallback,\n  useRef,\n  useState,\n} from 'react';\n\nimport { resizeInWidth } from '@portive/client';\nimport {\n  CloudImagePlugin,\n  type TCloudImageElement,\n} from '@sewellstephens/plate-cloud';\nimport { setNodes } from '@sewellstephens/plate-common';\nimport { findNodePath, useEditorRef } from '@sewellstephens/plate-common/react';\n\ntype ImageSize = { height: number; width: number };\n\ntype SetImageSize = Dispatch<SetStateAction<ImageSize>>;\n\n/** The resize label that shows the width/height of the image */\nfunction ResizeLabel({ size }: { size: { height: number; width: number } }) {\n  const isBelow = size.width < 100 || size.height < 100;\n  const bottom = isBelow ? -24 : 4;\n\n  return (\n    <div\n      style={{\n        background: '#404040',\n        borderRadius: 3,\n        bottom,\n        boxShadow: '0px 0px 2px 1px rgba(255, 255, 255, 0.5)',\n        color: 'white',\n        font: '10px/20px sans-serif',\n        left: 4,\n        minWidth: 50,\n        padding: '0 7px',\n        position: 'absolute',\n        textAlign: 'center',\n        transition: 'bottom 250ms',\n        zIndex: 100,\n      }}\n    >\n      {size.width} &times; {size.height}\n    </div>\n  );\n}\n\n/** The little divets on the resize handle bar. */\nconst barStyle = {\n  background: 'rgba(255,255,255,0.75)',\n  height: 16,\n  position: 'absolute',\n  top: 8,\n  width: 1,\n} as const;\n\n/** The handle used to drag resize an image */\nfunction ResizeHandles({\n  onMouseDown,\n}: {\n  onMouseDown: React.MouseEventHandler;\n}) {\n  return (\n    <>\n      {/* Invisible Handle */}\n      <div\n        onMouseDown={onMouseDown}\n        style={{\n          background: 'rgba(127,127,127,0.01)',\n          bottom: 0,\n          cursor: 'ew-resize',\n          position: 'absolute',\n          right: -8,\n          top: 0,\n          width: 16,\n        }}\n      >\n        {/* Visible Handle */}\n        <div\n          style={{\n            background: 'DodgerBlue',\n            borderRadius: 4,\n            height: 32,\n            left: 0,\n            marginTop: -16,\n            position: 'absolute',\n            top: '50%',\n            width: 16,\n          }}\n        >\n          <div style={{ ...barStyle, left: 3.5 }} />\n          <div style={{ ...barStyle, left: 7.5 }} />\n          <div style={{ ...barStyle, left: 11.5 }} />\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport function ResizeControls({\n  element,\n  setSize,\n  size,\n}: {\n  element: TCloudImageElement;\n  setSize: SetImageSize;\n  size: ImageSize;\n}) {\n  const editor = useEditorRef();\n  const [isResizing, setIsResizing] = useState(false);\n\n  const { maxResizeWidth, minResizeWidth } =\n    editor.getOptions(CloudImagePlugin);\n\n  const currentSizeRef = useRef<{ height: number; width: number }>();\n\n  const onMouseDown = useCallback(\n    (mouseDownEvent: React.MouseEvent) => {\n      setIsResizing(true);\n      const startX = mouseDownEvent.clientX;\n      const startWidth = size.width;\n      const minWidth = minResizeWidth;\n      const maxWidth = Math.min(element.maxWidth, maxResizeWidth);\n\n      /**\n       * Handle resize dragging through an event handler on mouseMove on the\n       * document.\n       */\n      function onDocumentMouseMove(mouseMoveEvent: MouseEvent) {\n        mouseMoveEvent.preventDefault();\n        mouseMoveEvent.stopPropagation();\n        /** Calculate the proposed width based on drag position */\n        const proposedWidth = startWidth + mouseMoveEvent.clientX - startX;\n\n        /** Constrain the proposed with between min, max and original width */\n        const nextWidth = Math.min(maxWidth, Math.max(minWidth, proposedWidth));\n\n        const currentSize = resizeInWidth(\n          { height: element.maxHeight, width: element.maxWidth },\n          nextWidth\n        );\n\n        currentSizeRef.current = currentSize;\n        setSize(currentSize);\n      }\n\n      const originalCursor = document.body.style.cursor;\n\n      /** When the user releases the mouse, remove all the event handlers */\n      function onDocumentMouseUp() {\n        setIsResizing(false);\n        document.removeEventListener('mousemove', onDocumentMouseMove);\n        document.removeEventListener('mouseup', onDocumentMouseUp);\n        document.body.style.cursor = originalCursor;\n\n        const at = findNodePath(editor, element);\n\n        if (!currentSizeRef.current) return;\n\n        setNodes<TCloudImageElement>(editor, currentSizeRef.current, { at });\n      }\n\n      /** Attach document event listeners */\n      document.addEventListener('mousemove', onDocumentMouseMove);\n      document.addEventListener('mouseup', onDocumentMouseUp);\n\n      /**\n       * While dragging, we want the cursor to be `ew-resize` (left-right arrow)\n       * even if the cursor happens to not be exactly on the handle at the\n       * moment due to a delay in the cursor moving to a location and the image\n       * resizing to it.\n       *\n       * Also, image has max width/height and the cursor can fall outside of it.\n       */\n      document.body.style.cursor = 'ew-resize';\n    },\n    [size.width, minResizeWidth, element, maxResizeWidth, setSize, editor]\n  );\n\n  if (element.width < minResizeWidth) return null;\n\n  return (\n    <>\n      {isResizing ? <ResizeLabel size={size} /> : null}\n      <ResizeHandles onMouseDown={onMouseDown} />\n    </>\n  );\n}\n",
      "name": "cloud-resize-controls.tsx"
    },
    {
      "content": "'use client';\n\nimport React, { type HTMLAttributes, useEffect, useRef, useState } from 'react';\n\nimport type { Upload, UploadProgress } from '@sewellstephens/plate-cloud';\n\nimport { cn } from '@sewellstephens/cn';\n\nexport function ProgressBar({\n  className,\n  upload,\n  ...props\n}: {\n  upload: UploadProgress;\n} & HTMLAttributes<HTMLDivElement>) {\n  const [width, setWidth] = useState<null | number>(null);\n  const ref = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (ref.current) setWidth(ref.current.offsetWidth);\n  }, []);\n\n  /**\n   * This formula looks a little funny because we want the `0` value of the\n   * progress bar to have a width that is still the height of the progress bar.\n   *\n   * This is for a few reasons:\n   *\n   * 1. We want the zero point to start with the progress bar being a circle\n   * 2. If we want rounded edges, if the width is shorter than the height, we get\n   *    an oval instead of a circle\n   * 3. The halfway point looks visually wrong because of the circle progress bar\n   *    when it is technically at the halfway point.\n   */\n  const progressWidth =\n    width == null\n      ? 0\n      : (upload.sentBytes / upload.totalBytes) * (width - 16) + 16;\n\n  return (\n    <div\n      className={cn('h-4 rounded-lg bg-gray-100 shadow-md', className)}\n      ref={ref}\n      {...props}\n    >\n      <div\n        className=\"h-4 rounded-lg bg-blue-500 duration-100\"\n        style={{\n          width: progressWidth,\n        }}\n      />\n    </div>\n  );\n}\n\nexport function FailBar({\n  className,\n  ...props\n}: HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\n        'h-4 rounded-lg border bg-red-700 text-center text-xs font-bold uppercase leading-tight text-white shadow-md',\n        className\n      )}\n      {...props}\n    />\n  );\n}\n\nexport function StatusBar(props: {\n  children?: React.ReactNode;\n  upload: Upload;\n}) {\n  const { children, upload } = props;\n\n  switch (upload.status) {\n    case 'progress': {\n      return <ProgressBar upload={upload} />;\n    }\n    case 'error': {\n      return <FailBar>Upload Failed</FailBar>;\n    }\n    case 'not-found': {\n      return <FailBar>Uploading...</FailBar>;\n    }\n    case 'success': {\n      return children || null;\n    }\n    default: {\n      throw new Error(`Should be unreachable`);\n    }\n  }\n}\n",
      "name": "cloud-status-bar.tsx"
    },
    {
      "content": "'use client';\n\nimport React from 'react';\n\nimport { CloudPlugin } from '@sewellstephens/plate-cloud';\nimport { useEditorPlugin } from '@sewellstephens/plate-common/react';\n\nconst buttonStyle: React.CSSProperties = {\n  background: '#f0f0f0',\n  border: 'none',\n  cursor: 'pointer',\n  marginRight: 4,\n  padding: 8,\n};\n\nexport function CloudToolbarButtons() {\n  const { api, editor } = useEditorPlugin(CloudPlugin);\n\n  const getSaveValue = () => {\n    console.info('editor.children', editor.children);\n    console.info('editor.cloud.getSaveValue()', api.cloud.getSaveValue());\n  };\n\n  const finishUploads = async () => {\n    await api.cloud.finishUploads();\n  };\n\n  return (\n    <>\n      <button onClick={getSaveValue} style={buttonStyle} type=\"button\">\n        Get Save Value\n      </button>\n      <button onClick={finishUploads} style={buttonStyle} type=\"button\">\n        Await Finish Uploads\n      </button>\n      <span>\n        Note: After clicking a button, output will be shown in console.\n      </span>\n    </>\n  );\n}\n",
      "name": "cloud-toolbar-buttons.tsx"
    }
  ],
  "name": "cloud",
  "registryDependencies": [],
  "type": "components:plate-ui"
}