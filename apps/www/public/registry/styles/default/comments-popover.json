{
  "dependencies": [
    "@sewellstephens/plate-comments"
  ],
  "files": [
    {
      "content": "'use client';\n\nimport React from 'react';\n\nimport { cn } from '@sewellstephens/cn';\nimport {\n  CommentProvider,\n  CommentsPositioner,\n  SCOPE_ACTIVE_COMMENT,\n  useFloatingCommentsContentState,\n  useFloatingCommentsState,\n} from '@sewellstephens/plate-comments/react';\nimport { PortalBody } from '@sewellstephens/plate-common/react';\n\nimport { CommentCreateForm } from './comment-create-form';\nimport { CommentItem } from './comment-item';\nimport { CommentReplyItems } from './comment-reply-items';\nimport { popoverVariants } from './popover';\n\nexport type FloatingCommentsContentProps = {\n  disableForm?: boolean;\n};\n\nexport function CommentsPopoverContent(props: FloatingCommentsContentProps) {\n  const { disableForm } = props;\n\n  const { activeCommentId, hasNoComment, myUserId, ref } =\n    useFloatingCommentsContentState();\n\n  return (\n    <CommentProvider\n      id={activeCommentId!}\n      key={activeCommentId}\n      scope={SCOPE_ACTIVE_COMMENT}\n    >\n      <div className={cn(popoverVariants(), 'relative w-[310px]')} ref={ref}>\n        {!hasNoComment && (\n          <>\n            <CommentItem commentId={activeCommentId!} key={activeCommentId} />\n\n            <CommentReplyItems />\n          </>\n        )}\n\n        {!!myUserId && !disableForm && <CommentCreateForm />}\n      </div>\n    </CommentProvider>\n  );\n}\n\nexport function CommentsPopover() {\n  const { activeCommentId, loaded } = useFloatingCommentsState();\n\n  if (!loaded || !activeCommentId) return null;\n\n  return (\n    <PortalBody>\n      <CommentsPositioner className=\"absolute z-50 w-[418px] pb-4\">\n        <CommentsPopoverContent />\n      </CommentsPositioner>\n    </PortalBody>\n  );\n}\n",
      "name": "comments-popover.tsx"
    },
    {
      "content": "'use client';\n\nimport React from 'react';\n\nimport { CommentsPlugin } from '@sewellstephens/plate-comments/react';\nimport { useEditorPlugin } from '@sewellstephens/plate-common/react';\n\nimport { Avatar, AvatarFallback, AvatarImage } from './avatar';\n\nexport function CommentAvatar({ userId }: { userId: null | string }) {\n  const { useOption } = useEditorPlugin(CommentsPlugin);\n  const user = useOption('userById', userId);\n\n  if (!user) return null;\n\n  return (\n    <Avatar className=\"size-5\">\n      <AvatarImage alt={user.name} src={user.avatarUrl} />\n      <AvatarFallback>{user.name?.[0]}</AvatarFallback>\n    </Avatar>\n  );\n}\n",
      "name": "comment-avatar.tsx"
    },
    {
      "content": "'use client';\n\nimport React from 'react';\n\nimport { cn } from '@sewellstephens/cn';\nimport {\n  CommentNewSubmitButton,\n  CommentNewTextarea,\n  CommentsPlugin,\n} from '@sewellstephens/plate-comments/react';\nimport { useEditorPlugin } from '@sewellstephens/plate-common/react';\n\nimport { buttonVariants } from './button';\nimport { CommentAvatar } from './comment-avatar';\nimport { inputVariants } from './input';\n\nexport function CommentCreateForm() {\n  const { useOption } = useEditorPlugin(CommentsPlugin);\n\n  const myUserId = useOption('myUserId');\n\n  return (\n    <div className=\"flex w-full space-x-2\">\n      <CommentAvatar userId={myUserId} />\n\n      <div className=\"flex grow flex-col items-end gap-2\">\n        <CommentNewTextarea className={inputVariants()} />\n\n        <CommentNewSubmitButton\n          className={cn(buttonVariants({ size: 'sm' }), 'w-[90px]')}\n        >\n          Comment\n        </CommentNewSubmitButton>\n      </div>\n    </div>\n  );\n}\n",
      "name": "comment-create-form.tsx"
    },
    {
      "content": "'use client';\n\nimport React from 'react';\n\nimport {\n  CommentProvider,\n  CommentsPlugin,\n  useCommentItemContentState,\n} from '@sewellstephens/plate-comments/react';\nimport { useEditorPlugin } from '@sewellstephens/plate-common/react';\nimport { formatDistance } from 'date-fns';\n\nimport { CommentAvatar } from './comment-avatar';\nimport { CommentMoreDropdown } from './comment-more-dropdown';\nimport { CommentResolveButton } from './comment-resolve-button';\nimport { CommentValue } from './comment-value';\n\ntype LateCommentProps = {\n  commentId: string;\n};\n\nfunction CommentItemContent() {\n  const {\n    comment,\n    commentText,\n    editingValue,\n    isMyComment,\n    isReplyComment,\n    user,\n  } = useCommentItemContentState();\n\n  return (\n    <div>\n      <div className=\"relative flex items-center gap-2\">\n        <CommentAvatar userId={comment.userId} />\n\n        <h4 className=\"text-sm font-semibold leading-none\">{user?.name}</h4>\n\n        <div className=\"text-xs leading-none text-muted-foreground\">\n          {formatDistance(comment.createdAt, Date.now())} ago\n        </div>\n\n        {isMyComment && (\n          <div className=\"absolute -right-0.5 -top-0.5 flex space-x-1\">\n            {isReplyComment ? null : <CommentResolveButton />}\n\n            <CommentMoreDropdown />\n          </div>\n        )}\n      </div>\n\n      <div className=\"mb-4 pl-7 pt-0.5\">\n        {editingValue ? (\n          <CommentValue />\n        ) : (\n          <div className=\"whitespace-pre-wrap text-sm\">{commentText}</div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport function CommentItem({ commentId }: LateCommentProps) {\n  const { useOption } = useEditorPlugin(CommentsPlugin);\n  const comment = useOption('commentById', commentId);\n\n  if (!comment) return null;\n\n  return (\n    <CommentProvider id={commentId} key={commentId}>\n      <CommentItemContent />\n    </CommentProvider>\n  );\n}\n",
      "name": "comment-item.tsx"
    },
    {
      "content": "'use client';\n\nimport React from 'react';\n\nimport { cn } from '@sewellstephens/cn';\nimport {\n  useCommentDeleteButton,\n  useCommentDeleteButtonState,\n  useCommentEditButton,\n  useCommentEditButtonState,\n} from '@sewellstephens/plate-comments/react';\n\nimport { Icons } from '@/components/icons';\n\nimport { Button } from './button';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from './dropdown-menu';\n\nexport function CommentMoreDropdown() {\n  const editButtonState = useCommentEditButtonState();\n  const { props: editProps } = useCommentEditButton(editButtonState);\n  const deleteButtonState = useCommentDeleteButtonState();\n  const { props: deleteProps } = useCommentDeleteButton(deleteButtonState);\n\n  return (\n    <DropdownMenu modal={false}>\n      <DropdownMenuTrigger asChild>\n        <Button className={cn('h-6 p-1 text-muted-foreground')} variant=\"ghost\">\n          <Icons.more className=\"size-4\" />\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent>\n        <DropdownMenuItem {...editProps}>Edit comment</DropdownMenuItem>\n        <DropdownMenuItem {...deleteProps}>Delete comment</DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}\n",
      "name": "comment-more-dropdown.tsx"
    },
    {
      "content": "'use client';\n\nimport React from 'react';\n\nimport {\n  SCOPE_ACTIVE_COMMENT,\n  useCommentReplies,\n} from '@sewellstephens/plate-comments/react';\n\nimport { CommentItem } from './comment-item';\n\nexport function CommentReplyItems() {\n  const commentReplies = useCommentReplies(SCOPE_ACTIVE_COMMENT);\n\n  return (\n    <>\n      {Object.keys(commentReplies).map((id) => (\n        <CommentItem commentId={id} key={id} />\n      ))}\n    </>\n  );\n}\n",
      "name": "comment-reply-items.tsx"
    },
    {
      "content": "'use client';\n\nimport React from 'react';\n\nimport { cn } from '@sewellstephens/cn';\nimport {\n  CommentResolveButton as CommentResolveButtonPrimitive,\n  useComment,\n} from '@sewellstephens/plate-comments/react';\n\nimport { Icons } from '@/components/icons';\n\nimport { buttonVariants } from './button';\n\nexport function CommentResolveButton() {\n  const comment = useComment()!;\n\n  return (\n    <CommentResolveButtonPrimitive\n      className={cn(\n        buttonVariants({ variant: 'ghost' }),\n        'h-6 p-1 text-muted-foreground'\n      )}\n    >\n      {comment.isResolved ? (\n        <Icons.refresh className=\"size-4\" />\n      ) : (\n        <Icons.check className=\"size-4\" />\n      )}\n    </CommentResolveButtonPrimitive>\n  );\n}\n",
      "name": "comment-resolve-button.tsx"
    },
    {
      "content": "'use client';\n\nimport React from 'react';\n\nimport { cn } from '@sewellstephens/cn';\nimport {\n  CommentEditActions,\n  CommentEditTextarea,\n} from '@sewellstephens/plate-comments/react';\n\nimport { buttonVariants } from './button';\nimport { inputVariants } from './input';\n\nexport function CommentValue() {\n  return (\n    <div className=\"my-2 flex flex-col items-end gap-2\">\n      <CommentEditTextarea className={cn(inputVariants(), 'min-h-[60px]')} />\n\n      <div className=\"flex space-x-2\">\n        <CommentEditActions.CancelButton\n          className={buttonVariants({ size: 'xs', variant: 'outline' })}\n        >\n          Cancel\n        </CommentEditActions.CancelButton>\n\n        <CommentEditActions.SaveButton\n          className={buttonVariants({ size: 'xs', variant: 'default' })}\n        >\n          Save\n        </CommentEditActions.SaveButton>\n      </div>\n    </div>\n  );\n}\n",
      "name": "comment-value.tsx"
    }
  ],
  "name": "comments-popover",
  "registryDependencies": [
    "popover",
    "avatar"
  ],
  "type": "components:plate-ui"
}