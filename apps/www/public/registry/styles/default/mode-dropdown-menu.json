{
  "dependencies": [],
  "files": [
    {
      "content": "import React from 'react';\n\nimport type { DropdownMenuProps } from '@radix-ui/react-dropdown-menu';\n\nimport {\n  focusEditor,\n  useEditorReadOnly,\n  useEditorRef,\n  usePlateStore,\n} from '@sewellstephens/plate-common/react';\n\nimport { Icons } from '@/components/icons';\n\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuRadioGroup,\n  DropdownMenuRadioItem,\n  DropdownMenuTrigger,\n  useOpenState,\n} from './dropdown-menu';\nimport { ToolbarButton } from './toolbar';\n\nexport function ModeDropdownMenu(props: DropdownMenuProps) {\n  const editor = useEditorRef();\n  const setReadOnly = usePlateStore().set.readOnly();\n  const readOnly = useEditorReadOnly();\n  const openState = useOpenState();\n\n  let value = 'editing';\n\n  if (readOnly) value = 'viewing';\n\n  const item: any = {\n    editing: (\n      <>\n        <Icons.editing className=\"mr-2 size-5\" />\n        <span className=\"hidden lg:inline\">Editing</span>\n      </>\n    ),\n    viewing: (\n      <>\n        <Icons.viewing className=\"mr-2 size-5\" />\n        <span className=\"hidden lg:inline\">Viewing</span>\n      </>\n    ),\n  };\n\n  return (\n    <DropdownMenu modal={false} {...openState} {...props}>\n      <DropdownMenuTrigger asChild>\n        <ToolbarButton\n          className=\"min-w-[auto] lg:min-w-[130px]\"\n          isDropdown\n          pressed={openState.open}\n          tooltip=\"Editing mode\"\n        >\n          {item[value]}\n        </ToolbarButton>\n      </DropdownMenuTrigger>\n\n      <DropdownMenuContent align=\"start\" className=\"min-w-[180px]\">\n        <DropdownMenuRadioGroup\n          className=\"flex flex-col gap-0.5\"\n          onValueChange={(newValue) => {\n            if (newValue !== 'viewing') {\n              setReadOnly(false);\n            }\n            if (newValue === 'viewing') {\n              setReadOnly(true);\n\n              return;\n            }\n            if (newValue === 'editing') {\n              focusEditor(editor);\n\n              return;\n            }\n          }}\n          value={value}\n        >\n          <DropdownMenuRadioItem value=\"editing\">\n            {item.editing}\n          </DropdownMenuRadioItem>\n\n          <DropdownMenuRadioItem value=\"viewing\">\n            {item.viewing}\n          </DropdownMenuRadioItem>\n        </DropdownMenuRadioGroup>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}\n",
      "name": "mode-dropdown-menu.tsx"
    }
  ],
  "name": "mode-dropdown-menu",
  "registryDependencies": [
    "dropdown-menu",
    "toolbar"
  ],
  "type": "components:plate-ui"
}