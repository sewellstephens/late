{
  "dependencies": [
    "@radix-ui/react-popover"
  ],
  "files": [
    {
      "content": "import React from 'react';\n\nimport {\n  type EmojiDropdownMenuOptions,\n  useEmojiDropdownMenuState,\n} from '@sewellstephens/plate-emoji/react';\n\nimport { Icons } from '@/components/icons';\n\nimport { emojiCategoryIcons, emojiSearchIcons } from './emoji-icons';\nimport { EmojiPicker } from './emoji-picker';\nimport { EmojiToolbarDropdown } from './emoji-toolbar-dropdown';\nimport { ToolbarButton } from './toolbar';\n\ntype EmojiDropdownMenuProps = {\n  options?: EmojiDropdownMenuOptions;\n} & React.ComponentPropsWithoutRef<typeof ToolbarButton>;\n\nexport function EmojiDropdownMenu({\n  options,\n  ...props\n}: EmojiDropdownMenuProps) {\n  const { emojiPickerState, isOpen, setIsOpen } =\n    useEmojiDropdownMenuState(options);\n\n  return (\n    <EmojiToolbarDropdown\n      control={\n        <ToolbarButton isDropdown pressed={isOpen} tooltip=\"Emoji\" {...props}>\n          <Icons.emoji className=\"size-4\" />\n        </ToolbarButton>\n      }\n      isOpen={isOpen}\n      setIsOpen={setIsOpen}\n    >\n      <EmojiPicker\n        {...emojiPickerState}\n        icons={{\n          categories: emojiCategoryIcons,\n          search: emojiSearchIcons,\n        }}\n        isOpen={isOpen}\n        setIsOpen={setIsOpen}\n        settings={options?.settings}\n      />\n    </EmojiToolbarDropdown>\n  );\n}\n",
      "name": "emoji-dropdown-menu.tsx"
    },
    {
      "content": "import React, { type ReactNode } from 'react';\n\nimport * as Popover from '@radix-ui/react-popover';\n\ntype EmojiToolbarDropdownProps = {\n  children: ReactNode;\n  control: ReactNode;\n  isOpen: boolean;\n  setIsOpen: (open: boolean) => void;\n};\n\nexport function EmojiToolbarDropdown({\n  children,\n  control,\n  isOpen,\n  setIsOpen,\n}: EmojiToolbarDropdownProps) {\n  return (\n    <Popover.Root onOpenChange={setIsOpen} open={isOpen}>\n      <Popover.Trigger asChild>{control}</Popover.Trigger>\n\n      <Popover.Portal>\n        <Popover.Content className=\"z-[100]\">{children}</Popover.Content>\n      </Popover.Portal>\n    </Popover.Root>\n  );\n}\n",
      "name": "emoji-toolbar-dropdown.tsx"
    },
    {
      "content": "import type React from 'react';\n\nimport type { EmojiCategoryList } from '@sewellstephens/plate-emoji';\n\nimport {\n  AppleIcon,\n  ClockIcon,\n  CompassIcon,\n  DeleteIcon,\n  FlagIcon,\n  LeafIcon,\n  LightbulbIcon,\n  MusicIcon,\n  SearchIcon,\n  SmileIcon,\n  StarIcon,\n} from 'lucide-react';\n\nexport const emojiCategoryIcons: Record<\n  EmojiCategoryList,\n  { outline: React.ReactElement; solid: React.ReactElement }\n> = {\n  activity: {\n    outline: (\n      <svg\n        className=\"size-full\"\n        fill=\"none\"\n        stroke=\"currentColor\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeWidth=\"2\"\n        viewBox=\"0 0 24 24\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        <circle cx=\"12\" cy=\"12\" r=\"10\" />\n        <path d=\"M2.1 13.4A10.1 10.1 0 0 0 13.4 2.1\" />\n        <path d=\"m5 4.9 14 14.2\" />\n        <path d=\"M21.9 10.6a10.1 10.1 0 0 0-11.3 11.3\" />\n      </svg>\n    ),\n    // Needed to add another solid variant - outline will be used for now\n    solid: (\n      <svg\n        className=\"size-full\"\n        fill=\"none\"\n        stroke=\"currentColor\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeWidth=\"2\"\n        viewBox=\"0 0 24 24\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        <circle cx=\"12\" cy=\"12\" r=\"10\" />\n        <path d=\"M2.1 13.4A10.1 10.1 0 0 0 13.4 2.1\" />\n        <path d=\"m5 4.9 14 14.2\" />\n        <path d=\"M21.9 10.6a10.1 10.1 0 0 0-11.3 11.3\" />\n      </svg>\n    ),\n  },\n\n  custom: {\n    outline: <StarIcon className=\"size-full\" />,\n    // Needed to add another solid variant - outline will be used for now\n    solid: <StarIcon className=\"size-full\" />,\n  },\n\n  flags: {\n    outline: <FlagIcon className=\"size-full\" />,\n    // Needed to add another solid variant - outline will be used for now\n    solid: <FlagIcon className=\"size-full\" />,\n  },\n\n  foods: {\n    outline: <AppleIcon className=\"size-full\" />,\n    // Needed to add another solid variant - outline will be used for now\n    solid: <AppleIcon className=\"size-full\" />,\n  },\n\n  frequent: {\n    outline: <ClockIcon className=\"size-full\" />,\n    // Needed to add another solid variant - outline will be used for now\n    solid: <ClockIcon className=\"size-full\" />,\n  },\n\n  nature: {\n    outline: <LeafIcon className=\"size-full\" />,\n    // Needed to add another solid variant - outline will be used for now\n    solid: <LeafIcon className=\"size-full\" />,\n  },\n\n  objects: {\n    outline: <LightbulbIcon className=\"size-full\" />,\n    // Needed to add another solid variant - outline will be used for now\n    solid: <LightbulbIcon className=\"size-full\" />,\n  },\n\n  people: {\n    outline: <SmileIcon className=\"size-full\" />,\n    // Needed to add another solid variant - outline will be used for now\n    solid: <SmileIcon className=\"size-full\" />,\n  },\n\n  places: {\n    outline: <CompassIcon className=\"size-full\" />,\n    // Needed to add another solid variant - outline will be used for now\n    solid: <CompassIcon className=\"size-full\" />,\n  },\n\n  symbols: {\n    outline: <MusicIcon className=\"size-full\" />,\n    // Needed to add another solid variant - outline will be used for now\n    solid: <MusicIcon className=\"size-full\" />,\n  },\n};\n\nexport const emojiSearchIcons = {\n  delete: <DeleteIcon className=\"size-4\" />,\n\n  loupe: <SearchIcon className=\"size-4\" />,\n};\n",
      "name": "emoji-icons.tsx"
    },
    {
      "content": "import React from 'react';\n\nimport type { UseEmojiPickerType } from '@sewellstephens/plate-emoji/react';\n\nimport { cn } from '@sewellstephens/cn';\nimport { EmojiSettings } from '@sewellstephens/plate-emoji';\n\nimport { EmojiPickerContent } from './emoji-picker-content';\nimport { EmojiPickerNavigation } from './emoji-picker-navigation';\nimport { EmojiPickerPreview } from './emoji-picker-preview';\nimport { EmojiPickerSearchAndClear } from './emoji-picker-search-and-clear';\nimport { EmojiPickerSearchBar } from './emoji-picker-search-bar';\n\nexport function EmojiPicker({\n  clearSearch,\n  emoji,\n  emojiLibrary,\n  focusedCategory,\n  handleCategoryClick,\n  hasFound,\n  i18n,\n  icons,\n  isSearching,\n  onMouseOver,\n  onSelectEmoji,\n  refs,\n  searchResult,\n  searchValue,\n  setSearch,\n  settings = EmojiSettings,\n  visibleCategories,\n}: UseEmojiPickerType) {\n  return (\n    <div\n      className={cn(\n        'flex flex-col rounded-xl bg-card',\n        'h-[23rem] w-80 border shadow-md'\n      )}\n    >\n      <EmojiPickerNavigation\n        emojiLibrary={emojiLibrary}\n        focusedCategory={focusedCategory}\n        i18n={i18n}\n        icons={icons}\n        onClick={handleCategoryClick}\n      />\n      <EmojiPickerSearchBar\n        i18n={i18n}\n        searchValue={searchValue}\n        setSearch={setSearch}\n      >\n        <EmojiPickerSearchAndClear\n          clearSearch={clearSearch}\n          i18n={i18n}\n          searchValue={searchValue}\n        />\n      </EmojiPickerSearchBar>\n      <EmojiPickerContent\n        emojiLibrary={emojiLibrary}\n        i18n={i18n}\n        isSearching={isSearching}\n        onMouseOver={onMouseOver}\n        onSelectEmoji={onSelectEmoji}\n        refs={refs}\n        searchResult={searchResult}\n        settings={settings}\n        visibleCategories={visibleCategories}\n      />\n      <EmojiPickerPreview\n        emoji={emoji}\n        hasFound={hasFound}\n        i18n={i18n}\n        isSearching={isSearching}\n      />\n    </div>\n  );\n}\n",
      "name": "emoji-picker.tsx"
    },
    {
      "content": "import { memo, useCallback } from 'react';\n\nimport type { UseEmojiPickerType } from '@sewellstephens/plate-emoji/react';\n\nimport { cn } from '@sewellstephens/cn';\nimport { type Emoji, EmojiSettings, type GridRow } from '@sewellstephens/plate-emoji';\n\nexport type EmojiPickerContentProps = Pick<\n  UseEmojiPickerType,\n  | 'emojiLibrary'\n  | 'i18n'\n  | 'isSearching'\n  | 'onMouseOver'\n  | 'onSelectEmoji'\n  | 'refs'\n  | 'searchResult'\n  | 'settings'\n  | 'visibleCategories'\n>;\n\nexport type EmojiButtonProps = {\n  emoji: Emoji;\n  index: number;\n  onMouseOver: (emoji?: Emoji) => void;\n  onSelect: (emoji: Emoji) => void;\n};\n\nexport type RowOfButtonsProps = {\n  row: GridRow;\n} & Pick<UseEmojiPickerType, 'emojiLibrary' | 'onMouseOver' | 'onSelectEmoji'>;\n\nconst Button = memo(\n  ({ emoji, index, onMouseOver, onSelect }: EmojiButtonProps) => {\n    return (\n      <button\n        aria-label={emoji.skins[0].native}\n        className=\"group relative flex size-9 cursor-pointer items-center justify-center border-none bg-transparent text-2xl leading-none\"\n        data-index={index}\n        onClick={() => onSelect(emoji)}\n        onMouseEnter={() => onMouseOver(emoji)}\n        onMouseLeave={() => onMouseOver()}\n        tabIndex={-1}\n        type=\"button\"\n      >\n        <div\n          aria-hidden=\"true\"\n          className=\"absolute inset-0 rounded-full opacity-0 group-hover:opacity-100\"\n        />\n        <span data-emoji-set=\"native\" style={{ position: 'relative' }}>\n          {emoji.skins[0].native}\n        </span>\n      </button>\n    );\n  }\n);\nButton.displayName = 'Button';\n\nconst RowOfButtons = memo(\n  ({ emojiLibrary, onMouseOver, onSelectEmoji, row }: RowOfButtonsProps) => (\n    <div className=\"flex\" data-index={row.id} key={row.id}>\n      {row.elements.map((emojiId, index) => (\n        <Button\n          emoji={emojiLibrary.getEmoji(emojiId)}\n          index={index}\n          key={emojiId}\n          onMouseOver={onMouseOver}\n          onSelect={onSelectEmoji}\n        />\n      ))}\n    </div>\n  )\n);\nRowOfButtons.displayName = 'RowOfButtons';\n\nexport function EmojiPickerContent({\n  emojiLibrary,\n  i18n,\n  isSearching = false,\n  onMouseOver,\n  onSelectEmoji,\n  refs,\n  searchResult,\n  settings = EmojiSettings,\n  visibleCategories,\n}: EmojiPickerContentProps) {\n  const getRowWidth = settings.perLine.value * settings.buttonSize.value;\n\n  const isCategoryVisible = useCallback(\n    (categoryId: any) => {\n      return visibleCategories.has(categoryId)\n        ? visibleCategories.get(categoryId)\n        : false;\n    },\n    [visibleCategories]\n  );\n\n  const EmojiList = useCallback(() => {\n    return emojiLibrary\n      .getGrid()\n      .sections()\n      .map(({ id: categoryId }) => {\n        const section = emojiLibrary.getGrid().section(categoryId);\n        const { buttonSize } = settings;\n\n        return (\n          <div\n            data-id={categoryId}\n            key={categoryId}\n            ref={section.root}\n            style={{ width: getRowWidth }}\n          >\n            <div className=\"sticky -top-px z-[1] bg-card/90 p-1 py-2 text-sm font-semibold backdrop-blur-sm\">\n              {i18n.categories[categoryId]}\n            </div>\n            <div\n              className=\"relative flex flex-wrap\"\n              style={{ height: section.getRows().length * buttonSize.value }}\n            >\n              {isCategoryVisible(categoryId) &&\n                section\n                  .getRows()\n                  .map((row: GridRow) => (\n                    <RowOfButtons\n                      emojiLibrary={emojiLibrary}\n                      key={row.id}\n                      onMouseOver={onMouseOver}\n                      onSelectEmoji={onSelectEmoji}\n                      row={row}\n                    />\n                  ))}\n            </div>\n          </div>\n        );\n      });\n  }, [\n    emojiLibrary,\n    getRowWidth,\n    i18n.categories,\n    isCategoryVisible,\n    onSelectEmoji,\n    onMouseOver,\n    settings,\n  ]);\n\n  const SearchList = useCallback(() => {\n    return (\n      <div data-id=\"search\" style={{ width: getRowWidth }}>\n        <div className=\"sticky -top-px z-[1] bg-card/90 p-1 py-2 font-semibold backdrop-blur-sm\">\n          {i18n.searchResult}\n        </div>\n        <div className=\"relative flex flex-wrap\">\n          {searchResult.map((emoji: Emoji, index: number) => (\n            <Button\n              emoji={emojiLibrary.getEmoji(emoji.id)}\n              index={index}\n              key={emoji.id}\n              onMouseOver={onMouseOver}\n              onSelect={onSelectEmoji}\n            />\n          ))}\n        </div>\n      </div>\n    );\n  }, [\n    emojiLibrary,\n    getRowWidth,\n    i18n.searchResult,\n    searchResult,\n    onSelectEmoji,\n    onMouseOver,\n  ]);\n\n  return (\n    <div\n      className={cn(\n        'h-full min-h-[50%] overflow-y-auto overflow-x-hidden px-3',\n        '[&::-webkit-scrollbar]:w-4',\n        '[&::-webkit-scrollbar-button]:hidden [&::-webkit-scrollbar-button]:size-0',\n        ':hover:[&::-webkit-scrollbar-thumb]:bg-[#f3f4f6]',\n        '[&::-webkit-scrollbar-thumb]:min-h-[65px] [&::-webkit-scrollbar-thumb]:rounded-2xl [&::-webkit-scrollbar-thumb]:border-4 [&::-webkit-scrollbar-thumb]:border-white',\n        '[&::-webkit-scrollbar-track]:border-0'\n      )}\n      data-id=\"scroll\"\n      ref={refs.current.contentRoot}\n    >\n      <div className=\"h-full\" ref={refs.current.content}>\n        {isSearching ? SearchList() : EmojiList()}\n      </div>\n    </div>\n  );\n}\n",
      "name": "emoji-picker-content.tsx"
    },
    {
      "content": "import React from 'react';\n\nimport type { EmojiCategoryList } from '@sewellstephens/plate-emoji';\nimport type {\n  IEmojiFloatingLibrary,\n  UseEmojiPickerType,\n} from '@sewellstephens/plate-emoji/react';\n\nimport { cn } from '@sewellstephens/cn';\n\nimport { Button } from './button';\n\nexport type EmojiPickerNavigationProps = {\n  onClick: (id: EmojiCategoryList) => void;\n} & Pick<\n  UseEmojiPickerType,\n  'emojiLibrary' | 'focusedCategory' | 'i18n' | 'icons'\n>;\n\nconst getBarProperty = (\n  emojiLibrary: IEmojiFloatingLibrary,\n  focusedCategory?: EmojiCategoryList\n) => {\n  let width = 0;\n  let position = 0;\n\n  if (focusedCategory) {\n    width = 100 / emojiLibrary.getGrid().size;\n    position = focusedCategory\n      ? emojiLibrary.indexOf(focusedCategory) * 100\n      : 0;\n  }\n\n  return { position, width };\n};\n\nexport function EmojiPickerNavigation({\n  emojiLibrary,\n  focusedCategory,\n  i18n,\n  icons,\n  onClick,\n}: EmojiPickerNavigationProps) {\n  const { position, width } = getBarProperty(emojiLibrary, focusedCategory);\n\n  return (\n    <nav\n      className=\"mb-2.5 border-0 border-b border-solid border-b-border p-3\"\n      id=\"emoji-nav\"\n    >\n      <div className=\"relative flex items-center\">\n        {emojiLibrary\n          .getGrid()\n          .sections()\n          .map(({ id }) => (\n            <Button\n              aria-label={i18n.categories[id]}\n              className={cn(\n                'size-6 grow fill-current text-muted-foreground hover:bg-transparent hover:text-foreground',\n                id === focusedCategory &&\n                  'pointer-events-none fill-current text-primary'\n              )}\n              key={id}\n              onClick={() => onClick(id)}\n              size=\"icon\"\n              title={i18n.categories[id]}\n              type=\"button\"\n              variant=\"ghost\"\n            >\n              <span className=\"size-5\">{icons.categories[id].outline}</span>\n            </Button>\n          ))}\n        <div\n          className=\"absolute -bottom-3 left-0 h-0.5 w-full rounded-t-lg bg-primary opacity-100 transition-transform duration-200\"\n          style={{\n            transform: `translateX(${position}%)`,\n            visibility: `${focusedCategory ? 'visible' : 'hidden'}`,\n            width: `${width}%`,\n          }}\n        />\n      </div>\n    </nav>\n  );\n}\n",
      "name": "emoji-picker-navigation.tsx"
    },
    {
      "content": "import type { UseEmojiPickerType } from '@sewellstephens/plate-emoji/react';\n\nexport type EmojiPickerPreviewProps = Pick<\n  UseEmojiPickerType,\n  'emoji' | 'hasFound' | 'i18n' | 'isSearching'\n>;\n\nexport type EmojiPreviewProps = Pick<UseEmojiPickerType, 'emoji'>;\n\nexport type NoEmojiPreviewProps = Pick<UseEmojiPickerType, 'i18n'>;\n\nexport type PickAnEmojiPreviewProps = NoEmojiPreviewProps;\n\nfunction EmojiPreview({ emoji }: EmojiPreviewProps) {\n  return (\n    <div className=\"flex h-20 items-center border-t border-muted p-2\">\n      <div className=\"flex items-center justify-center text-2xl\">\n        {emoji?.skins[0].native}\n      </div>\n      <div className=\"overflow-hidden pl-2\">\n        <div className=\"truncate text-sm\">{emoji?.name}</div>\n        <div className=\"truncate text-xs\">{`:${emoji?.id}:`}</div>\n      </div>\n    </div>\n  );\n}\n\nfunction NoEmoji({ i18n }: NoEmojiPreviewProps) {\n  return (\n    <div className=\"flex h-20 items-center border-t border-muted p-2\">\n      <div className=\"flex items-center justify-center text-2xl\">😢</div>\n      <div className=\"overflow-hidden pl-2\">\n        <div className=\"truncate text-sm font-semibold text-primary\">\n          {i18n.searchNoResultsTitle}\n        </div>\n        <div className=\"truncate text-xs\">{i18n.searchNoResultsSubtitle}</div>\n      </div>\n    </div>\n  );\n}\n\nfunction PickAnEmoji({ i18n }: PickAnEmojiPreviewProps) {\n  return (\n    <div className=\"flex h-20 items-center border-t border-muted p-2\">\n      <div className=\"flex items-center justify-center text-2xl\">☝️</div>\n      <div className=\"overflow-hidden pl-2\">\n        <div className=\"truncate text-sm font-semibold\">{i18n.pick}</div>\n      </div>\n    </div>\n  );\n}\n\nexport function EmojiPickerPreview({\n  emoji,\n  hasFound = true,\n  i18n,\n  isSearching = false,\n  ...props\n}: EmojiPickerPreviewProps) {\n  const showPickEmoji = !emoji && !(isSearching && !hasFound);\n  const showNoEmoji = isSearching && !hasFound;\n  const showPreview = emoji;\n\n  return (\n    <>\n      {showPreview && <EmojiPreview emoji={emoji} {...props} />}\n      {showPickEmoji && <PickAnEmoji i18n={i18n} {...props} />}\n      {showNoEmoji && <NoEmoji i18n={i18n} {...props} />}\n    </>\n  );\n}\n",
      "name": "emoji-picker-preview.tsx"
    },
    {
      "content": "import type { UseEmojiPickerType } from '@sewellstephens/plate-emoji/react';\n\nimport { cn } from '@sewellstephens/cn';\nimport { DeleteIcon, SearchIcon } from 'lucide-react';\n\nimport { Button } from './button';\n\nexport type EmojiPickerSearchAndClearProps = Pick<\n  UseEmojiPickerType,\n  'clearSearch' | 'i18n' | 'searchValue'\n>;\n\nexport function EmojiPickerSearchAndClear({\n  clearSearch,\n  i18n,\n  searchValue,\n}: EmojiPickerSearchAndClearProps) {\n  return (\n    <div className=\"flex items-center\">\n      <div\n        className={cn(\n          'absolute left-3 top-1/2 z-10 flex size-5 -translate-y-1/2 items-center justify-center'\n        )}\n      >\n        <SearchIcon className=\"size-4\" />\n      </div>\n      {searchValue && (\n        <Button\n          aria-label=\"Clear\"\n          className={cn(\n            'absolute right-1 top-1/2 flex size-8 -translate-y-1/2 cursor-pointer items-center justify-center border-none bg-transparent'\n          )}\n          onClick={clearSearch}\n          size=\"icon\"\n          title={i18n.clear}\n          type=\"button\"\n          variant=\"ghost\"\n        >\n          <DeleteIcon className=\"size-4\" />\n        </Button>\n      )}\n    </div>\n  );\n}\n",
      "name": "emoji-picker-search-and-clear.tsx"
    },
    {
      "content": "import type { ReactNode } from 'react';\n\nimport type { UseEmojiPickerType } from '@sewellstephens/plate-emoji/react';\n\nexport type EmojiPickerSearchBarProps = {\n  children: ReactNode;\n} & Pick<UseEmojiPickerType, 'i18n' | 'searchValue' | 'setSearch'>;\n\nexport function EmojiPickerSearchBar({\n  children,\n  i18n,\n  searchValue,\n  setSearch,\n}: EmojiPickerSearchBarProps) {\n  return (\n    <div className=\"flex items-center px-2\">\n      <div className=\"relative flex grow items-center\">\n        <input\n          aria-label=\"Search\"\n          autoComplete=\"off\"\n          className=\"block w-full appearance-none rounded-full border-0 bg-accent px-10 py-2 text-sm outline-none placeholder:text-muted-foreground focus-visible:outline-none\"\n          onChange={(event) => setSearch(event.target.value)}\n          placeholder={i18n.search}\n          type=\"text\"\n          value={searchValue}\n        />\n        {children}\n      </div>\n    </div>\n  );\n}\n",
      "name": "emoji-picker-search-bar.tsx"
    }
  ],
  "name": "emoji-dropdown-menu",
  "registryDependencies": [
    "toolbar"
  ],
  "type": "components:plate-ui"
}